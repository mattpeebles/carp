@inherits BaseCard

<p class="header" id="@ClassInfo.Identifier.ValueText">@ClassInfo.Identifier.ValueText</p>

<div class="card">

    @if (Constructors?.Any() == true)
    {
        <span class="sub-header">Constructors</span>

        foreach (var construct in Constructors)
        {
            <div class="card alt">
                <span class="keyword">@String.Join(" ", construct.Modifiers) </span>
                <span class="emphasize">@construct.Identifier.ValueText</span>
                <span>(</span>
                <span>
                   @((MarkupString)String.Join(", ", construct.ParameterList
                                                                ?.Parameters
                                                                .Select(param => $"<span class=\"{GetTypeClass(param.Type.ToString())}\">{param.Type.ToString()} </span>{param.Identifier.ValueText}")))
                </span>                
                <span>)</span>
            </div>
        }

        <br />
    }

    @if (Properties?.Any() == true || Fields?.Any() == true)
    {
        <span class="sub-header">Properties</span>

        if (Properties?.Any() == true)
        {
            foreach (var property in Properties)
            {
                <div class="card alt">
                    <span class="keyword">@String.Join(" ", property.Modifiers) </span>
                    <span class="@GetTypeClass(property.Type.ToString())">@(property.Type) </span>
                    <span class="emphasize">@property.Identifier.ValueText</span>
                    <span></span>
                </div>
            }
        }

        if (Fields?.Any() == true)
        {
            foreach (var field in Fields)
            {
                <div class="card alt">
                    <span class="keyword">@String.Join(" ", field.Modifiers) </span><span class="@GetTypeClass(field.Declaration.Type.ToString())">@field.Declaration.Type </span><span class="emphasize">@(field.Declaration.Variables.FirstOrDefault())</span><span></span>
                </div>
            }
        }
    }


    @if (Methods?.Any() == true)
    {
        <span class="sub-header">Methods</span>

        foreach (var method in Methods)
        {
            <MethodCard Method="method" ClassSet="ClassSet"/>
        }

        <br />
    }


</div>

@code {
    [Parameter]
    public ClassDeclarationSyntax ClassInfo { get; set; }

    public List<ConstructorDeclarationSyntax> Constructors { get; set; } = new List<ConstructorDeclarationSyntax>();
    public List<MethodDeclarationSyntax> Methods { get; set; } = new List<MethodDeclarationSyntax>();
    public List<PropertyDeclarationSyntax> Properties { get; set; } = new List<PropertyDeclarationSyntax>();
    public List<FieldDeclarationSyntax> Fields { get; set; } = new List<FieldDeclarationSyntax>();

    protected override void OnInitialized()
    {
        foreach (var member in ClassInfo.Members)
        {
            switch (member.Kind())
            {
                case SyntaxKind.ConstructorDeclaration:
                    if (member is ConstructorDeclarationSyntax constructorMember)
                    {
                        Constructors.Add(constructorMember);
                    }
                    break;
                case SyntaxKind.PropertyDeclaration:
                    if (member is PropertyDeclarationSyntax propertyMember)
                    {
                        Properties.Add(propertyMember);
                    }
                    break;
                case SyntaxKind.FieldDeclaration:
                    if (member is FieldDeclarationSyntax fieldMember)
                    {
                        Fields.Add(fieldMember);
                    }
                    break;
                case SyntaxKind.MethodDeclaration:
                    if (member is MethodDeclarationSyntax methodMember)
                    {
                        Methods.Add(methodMember);
                    }
                    break;
            }
        }
    }
}
