@inject ICommentParserService _commentParser;

<div class="card alt">
    <span class="keyword">@String.Join(" ", Method.Modifiers) </span>
    <span class="@GetTypeClass(Method.ReturnType.ToString())">@Method.ReturnType </span>
    <span class="emphasize">@Method.Identifier.ValueText</span>
    <span>(</span>
    <span>
        @((MarkupString)String.Join(", ", Method.ParameterList
                                                    ?.Parameters
                                                    .Select(param => $"<span class=\"{GetTypeClass(param.Type.ToString())}\">{param.Type.ToString()} </span>{param.Identifier.ValueText}")))
    </span>
    <span>)</span>

    @if(Method.HasStructuredTrivia)
    {
        <pre>
            @CommentXml
        </pre>
    }
</div>

@code{
    [Parameter]
    public MethodDeclarationSyntax Method { get; set; }

    [Parameter]
    public HashSet<string> ClassSet { get; set; }

    private string CommentXml { get; set; }

    private string GetTypeClass(string typeName)
    {
        return ClassSet?.Contains(typeName) == true ? "link" : "understate";
    }

    protected override void OnInitialized()
    {
        CommentXml = _commentParser.GetSingleLineComment(Method);
    }
}