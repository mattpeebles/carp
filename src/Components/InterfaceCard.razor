<h4 id="@InterfaceInfo.Identifier.ValueText">@InterfaceInfo.Identifier.ValueText</h4>

@if (Properties?.Any() == true || Fields?.Any() == true)
{
    <h5>Properties</h5>

    if (Properties?.Any() == true)
    {
        foreach (var property in Properties)
        {
            <div>
                <span>@String.Join(" ", property.Modifiers) </span><span>@(property.Type) </span><span>@property.Identifier.ValueText</span><span></span>
            </div>
        }
    }

    if (Fields?.Any() == true)
    {
        foreach (var field in Fields)
        {
            <div>
                <span>@String.Join(" ", field.Modifiers) </span><span>@(String.Join(" ", field.AttributeLists))</span><span>@field.Declaration</span><span></span>
            </div>
        }
    }

    <br />
}


@if (Methods?.Any() == true)
{
    <h5>Methods</h5>

    foreach (var method in Methods)
    {
        <span>@method.ReturnType </span><span>@method.Identifier.ValueText</span><span>(</span><span>@String.Join(", ", method.ParameterList?.Parameters)</span><span>)</span>
    }

    <br />
}


@code {
    [Parameter]
    public InterfaceDeclarationSyntax InterfaceInfo { get; set; }

    public List<MethodDeclarationSyntax> Methods { get; set; } = new List<MethodDeclarationSyntax>();
    public List<PropertyDeclarationSyntax> Properties { get; set; } = new List<PropertyDeclarationSyntax>();
    public List<FieldDeclarationSyntax> Fields { get; set; } = new List<FieldDeclarationSyntax>();

    protected override void OnInitialized()
    {
        foreach (var member in InterfaceInfo.Members)
        {
            switch (member.Kind())
            {
                case SyntaxKind.PropertyDeclaration:
                    if (member is PropertyDeclarationSyntax propertyMember)
                    {
                        Properties.Add(propertyMember);
                    }
                    break;
                case SyntaxKind.FieldDeclaration:
                    if (member is FieldDeclarationSyntax fieldMember)
                    {
                        Fields.Add(fieldMember);
                    }
                    break;
                case SyntaxKind.MethodDeclaration:
                    if (member is MethodDeclarationSyntax methodMember)
                    {
                        Methods.Add(methodMember);
                    }
                    break;
            }
        }
    }
}
