@inherits LayoutComponentBase
@page "/"
@using System.Web
@using Carp.Parsers;
@using Newtonsoft.Json;
@using Microsoft.CodeAnalysis.CSharp.Syntax;
@using Carp.Services.Parsers;
@inject IAnalysisService _analysis;
@inject HttpClient client;


<div class="sidebar">
    <NavMenu Classes="@ClassNames" Interfaces="@InterfaceNames"/>
</div>

<div class="main">
    <div class="top-row px-4">
        <a href="http://blazor.net" target="_blank" class="ml-md-auto">About</a>
    </div>

    <div class="content px-4">

        <h1>First Program Parse</h1>
        <button @onclick="ToggleShowProgram">Show Source Code</button>
        @if (showProgram)
        {
            <pre>@Program</pre>
        }


        @foreach (var classInfo in Classes)
        {
            <ClassCard ClassInfo="classInfo" />
        }

        @foreach (var interfaceInfo in Interfaces)
        {
            <InterfaceCard InterfaceInfo="interfaceInfo" />
        }
    </div>
</div>


@code {
    public List<string> ClassNames { get; set; } = new List<string>();
    public List<ClassDeclarationSyntax> Classes { get; set; } = new List<ClassDeclarationSyntax>();

    public List<string> InterfaceNames { get; set; } = new List<string>();
    public List<InterfaceDeclarationSyntax> Interfaces { get; set; } = new List<InterfaceDeclarationSyntax>();

    public string Program { get; set; }

    private CompilationUnitSyntax _programRoot { get; set; }

    private bool showProgram { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        _programRoot = await _analysis.GetProgramRoot();
        Program = _analysis.ProgramText;

        //let's collapse all of the namespaces in the code for now
        foreach (var member in _programRoot
                                        .Members
                                        .Where(_ => _.Kind() == SyntaxKind.NamespaceDeclaration)
                                        .SelectMany(x => (x as NamespaceDeclarationSyntax).Members))
        {
            switch (member.Kind())
            {
                case SyntaxKind.ClassDeclaration:
                    if (member is ClassDeclarationSyntax classMember)
                    {
                        Classes.Add(classMember);
                        ClassNames.Add(classMember.Identifier.ValueText);
                    }

                    break;
                case SyntaxKind.InterfaceDeclaration:
                    if(member is InterfaceDeclarationSyntax interfaceMember)
                    {
                        Interfaces.Add(interfaceMember);
                        InterfaceNames.Add(interfaceMember.Identifier.ValueText);
                    }
                    break;
            }


        }

    }

    private void ToggleShowProgram()
    {
        showProgram = !showProgram;
    }

}