@inherits LayoutComponentBase
@page "/{EncodedPath}"

@inject IAnalysisService _analysis;
@inject HttpClient client;

<div class="sidebar">
    <NavMenu EncodedPath="@EncodedPath" Classes="@ClassNames" Interfaces="@InterfaceNames" />
</div>

<div class="main">
    <div style="height: 5rem; background-color: white; border-bottom: 1px solid #EDF2F6"/>

    <div style="max-width: 56rem;">

        <h1>@SourcePath.Split("/").Last()</h1>
        <button @onclick="ToggleShowProgram">Show Source Code</button>
        @if (showProgram)
        {
            <pre>@Program</pre>
        }


        @if (Classes?.Any() == true)
        {
            <h3>Classes</h3>
            @foreach (var classInfo in Classes)
            {
                <ClassCard ClassInfo="classInfo" ClassSet="ClassNames" />
            }
        }

        @if (Interfaces?.Any() == true)
        {
            <h3>Interfaces</h3>
            @foreach (var interfaceInfo in Interfaces)
            {
                <InterfaceCard InterfaceInfo="interfaceInfo" />
            }
        }
    </div>
</div>


@code {
    [ParameterAttribute]
    public string EncodedPath { get; set; }

    public string SourcePath { get; set; }

    public string Url { get; set; }

    public HashSet<string> ClassNames { get; set; } = new HashSet<string>();
    public List<ClassDeclarationSyntax> Classes { get; set; } = new List<ClassDeclarationSyntax>();

    public List<string> InterfaceNames { get; set; } = new List<string>();
    public List<InterfaceDeclarationSyntax> Interfaces { get; set; } = new List<InterfaceDeclarationSyntax>();

    public string Program { get; set; }

    private CompilationUnitSyntax _programRoot { get; set; }

    private bool showProgram { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var base64EncodedBytes = System.Convert.FromBase64String(EncodedPath);
        SourcePath = System.Text.Encoding.UTF8.GetString(base64EncodedBytes);

        _programRoot = await _analysis.GetProgramRoot(SourcePath);
        Program = _analysis.ProgramText;

        //let's collapse all of the namespaces in the code for now
        foreach (var member in _programRoot
                                        .Members
                                        .Where(_ => _.Kind() == SyntaxKind.NamespaceDeclaration)
                                        .SelectMany(x => (x as NamespaceDeclarationSyntax).Members))
        {
            switch (member.Kind())
            {
                case SyntaxKind.ClassDeclaration:
                    if (member is ClassDeclarationSyntax classMember)
                    {
                        Classes.Add(classMember);
                        ClassNames.Add(classMember.Identifier.ValueText);
                    }

                    break;
                case SyntaxKind.InterfaceDeclaration:
                    if (member is InterfaceDeclarationSyntax interfaceMember)
                    {
                        Interfaces.Add(interfaceMember);
                        InterfaceNames.Add(interfaceMember.Identifier.ValueText);
                    }
                    break;
            }


        }

    }

    private void ToggleShowProgram()
    {
        showProgram = !showProgram;
    }

}